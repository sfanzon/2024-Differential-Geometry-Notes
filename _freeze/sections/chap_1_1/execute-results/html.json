{
  "hash": "a87f8aed89ce11b38aac2f89a0353ae5",
  "result": {
    "markdown": "::: {.content-hidden}\n$$\n%%   To set indentation of paragraphs\n\\setlength{\\parindent}{0pt}\n\n\n\n\n\n\n%%%%%%%%%%  MACROS    %%%%%%%%%%%%%%\n\n\n\\newcommand{\\R}{\\mathbb{R}}\n\\newcommand{\\Q}{\\mathbb{Q}}\n\\newcommand{\\Rtwo}{\\mathbb{R}^2}\n\\newcommand{\\Rthree}{\\mathbb{R}^3}\n\\newcommand{\\C}{\\mathbb{C}}  \n\\newcommand{\\N}{\\mathbb{N}}\n\\newcommand{\\Z}{\\mathbb{Z}}\n\n\n\n\n\\newcommand{\\e}{\\varepsilon}\n\\newcommand{\\g}{\\gamma}\n\n\n\n\\newcommand{\\closure}[2][2]{{}\\mkern#1mu \\overline{\\mkern-#1mu #2 \\mkern-#1mu}\\mkern#1mu {}}\n\n\n\n\n\\newcommand{\\Czero}{\\mathnormal{C}}\n\\newcommand{\\Cinf}{{\\mathnormal{C}}^{\\infty}}\n\\newcommand{\\Cinfcomp}{{\\mathnormal{C}}_0^{\\infty}}\n\\newcommand{\\Lone}{{\\mathnormal{L}}^1}\n\\newcommand{\\Loneloc}{{\\mathnormal{L}}_{loc}^1}\n\\newcommand{\\Ltwo}{{\\mathnormal{L}}^2}\n\\newcommand{\\Lp}{{\\mathnormal{L}}^p}\n\\newcommand{\\Linf}{{\\mathnormal{L}}^{\\infty}}\n\\newcommand{\\Woneone}{{\\mathnormal{W}}^{1,1}}\n\\newcommand{\\Wonetwo}{{\\mathnormal{W}}^{1,2}}\n\\newcommand{\\Wonep}{{\\mathnormal{W}}^{1,p}}\n\\newcommand{\\Woneinf}{{\\mathnormal{W}}^{1,\\infty}}\n\\newcommand{\\Wtwotwo}{{\\mathnormal{W}}^{2,2}}\n\\newcommand{\\Wktwo}{{\\mathnormal{W}}^{k,2}}\n\\newcommand{\\Wkp}{{\\mathnormal{W}}^{k,p}}\n\\newcommand{\\Lip}{\\mathnormal{Lip}}\n\n\n\n\n\\newcommand{\\scp}[2]{\\left\\langle #1,#2 \\right\\rangle} %prodotto scalare\n\\newcommand{\\abs}[1]{\\left| #1 \\right|}  %valore assoluto\n\\newcommand{\\norm}[1]{\\left\\| #1 \\right\\|} %norma\n\n\n\n\n\n\n\n\n\n$$\n:::\n\n\n\n# Plotting curves  {#sec-plot-curves} \n\n## Curves in 2D  {#sec-plot-2d-curves}\n\nSuppose we want to plot the parabola $y=t^2$ for $t$ in the interval $[-3,3]$. In our language, this is the two-dimensional curve\n$$\n\\g(t) = ( t, t^2 ) \\,, \\quad  t \\in [-3,3] \\,.\n$$\nThe two Python libraries we use to plot $\\g$ are **numpy** and **matplotlib**. In short, **numpy** handles multi-dimensional arrays and matrices, and can perform high-level mathematical functions on them. For any question you may have about numpy, answers can be found in the searchable documentation available [here](https://numpy.org/doc/stable/index.html). Instead **matplotlib** is a plotting library, with documentation [here](https://matplotlib.org). \nPython libraries need to be imported every time you want to use them. In our case we will import:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n\nThe above imports **numpy** and the module **pyplot** from **matplotlib**, and renames them to `np` and `plt`, respectively. These shorthands are standard in the literature, and they make code much more readable.  \nThe function for plotting 2D graphs is called `plot(x,y)` and is contained in `plt`. As the syntax suggests, `plot` takes as arguments two arrays \n$$\nx=[x_1, \\ldots, x_n]\\,, \\quad  y=[y_1,\\ldots,y_n]\\,.\n$$\nAs output it produces a graph which is the linear interpolation of the points $(x_i,y_i)$ in $\\R^2$, that is, consecutive points $(x_i,y_i)$ and $(x_{i+1},y_{i+1})$ are connected by a segment. Using `plot`, we can graph the curve $\\g(t)=(t,t^2)$ like so:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Code for plotting gamma\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generating array t\nt = np.array([-3,-2,-1,0,1,2,3])\n\n# Computing array f\nf = t**2\n\n# Plotting the curve\nplt.plot(t,f)\n\n# Plotting dots\nplt.plot(t,f,\"ko\")\n\n# Showing the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap_1_1_files/figure-html/cell-2-output-1.png){width=558 height=411}\n:::\n:::\n\n\nLet us comment the above code. The variable `t` is a numpy array containing the ordered values \n$$ \nt = [-3,-2,-1,0,1,2,3]\\,.\n$$ {#eq-numpy-array-t}\nThis array is then squared entry-by-entry via the operation $t\\ast\\!\\ast 2$ and saved in the new numpy array `f`, that is,\n$$\nf = [9,4,1,0,1,4,9] \\,.\n$$\nThe arrays `t` and `f` are then passed to `plot(t,f)`, which produces the above linear interpolation, with `t` on the *x-axis* and `f` on the *y-axis*. The command `plot(t,f,'ko')` instead plots a black dot at each point $(t_i,f_i)$. The latter is clearly not needed to obtain a plot, and it was only included to highlight the fact that `plot` is actually producing a linear interpolation between points. Finally `plt.show()` displays the figure in the user window[^1].  \nOf course one can refine the plot so that it resembles the continuous curve $\\g(t)=(t,t^2)$ that we all have in mind. This is achieved by generating a numpy array `t` with a finer stepsize, invoking the function `np.linspace(a,b,n)`. Such call will return a numpy array which contains `n` evenly spaced points, starts at `a`, and ends in `b`. For example `np.linspace(-3,3,7)` returns our original array `t` at @eq-numpy-array-t, \nas shown below \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Displaying output of np.linspace\n\nimport numpy as np\n\n# Generates array t by dividing interval \n# (-3,3) in 7 parts\nt = np.linspace(-3,3, 7)\n\n# Prints array t\nprint(\"t =\", t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt = [-3. -2. -1.  0.  1.  2.  3.]\n```\n:::\n:::\n\n\nIn order to have a more refined plot of $\\gamma$, we just need to increase $n$.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Plotting gamma with finer step-size\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generates array t by dividing interval \n# (-3,3) in 100 parts\nt = np.linspace(-3,3, 100)\n\n# Computes f\nf = t**2\n\n# Plotting\nplt.plot(t,f)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap_1_1_files/figure-html/cell-4-output-1.png){width=558 height=411}\n:::\n:::\n\n\n[^1]: The command `plt.show()` can be omitted if working in [Jupyter Notebook](https://jupyter.org), as it is called by default.\n\nWe now want to plot a parametric curve $\\gamma \\colon (a,b) \\to \\R^2$ with\n$$\n\\gamma(t) = (x(t), y(t)) \\,.\n$$\nClearly we need to modify the above code. The variable `t` will still be a numpy array produced by `linspace`. We then need to introduce the arrays `x` and `y` which ecode the first and second components of $\\gamma$, respectively.\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Divides time interval (a,b) in n parts\n# and saves output to numpy array t\nt = np.linspace(a, b, n)\n\n# Computes gamma from given functions x(y) and y(t)\nx = x(t)\ny = y(t)\n\n# Plots the curve\nplt.plot(x,y)\n\n# Shows the plot\nplt.show()\n```\n\n \n\n\n\nWe use the above code to plot the 2D curve known as the [Fermat's spiral](https://en.wikipedia.org/wiki/Fermat%27s_spiral)\n$$ \n\\g(t) = ( \\sqrt{t}  \\cos(t) , \\sqrt{t}  \\sin(t) ) \\quad \n\\text{ for } \\quad t \\in [0,50] \\,.\n$$ {#eq-Fermat-Spiral}\n\n\n```python\n# Plotting Fermat's spiral\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Divides time interval (0,50) in 500 parts\nt = np.linspace(0, 50, 500)\n\n# Computes Fermat's Spiral\nx = np.sqrt(t) * np.cos(t)\ny = np.sqrt(t) * np.sin(t)\n\n# Plots the Spiral\nplt.plot(x,y)\nplt.show()\n```\n\nBefore displaying the output of the above code, a few comments are in order. The array `t` has size 500, due to the behavior of `linspace`. You can also fact check this information by printing `np.size(t)`, which is the numpy function that returns the size of an array. We then use the numpy function `np.sqrt` to compute the square root of the array `t`. The outcome is still an array with the same size of `t`, that is, \n$$\nt=[t_1,\\ldots,t_n]   \\quad \\implies \\quad \\sqrt{t} = [\\sqrt{t_1}, \\ldots, \\sqrt{t_n}] \\,.\n$$\nSimilary, the call `np.cos(t)` returns the array\n$$\n\\cos(t) = [\\cos(t_1), \\ldots, \\cos(t_n)] \\,.\n$$\nThe two arrays `np.sqrt(t)` and `np.cos(t)` are then multiplied, term-by-term, and saved in the array `x`. The array `y` is computed similarly. The command `plt.plot(x,y)` then yields the graph of the Fermat's spiral:\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![Fermat's spiral](chap_1_1_files/figure-html/cell-5-output-1.png){width=569 height=411}\n:::\n:::\n\n\nThe above plots can be styled a bit. For example we can give a title to the plot, label the axes, plot the spiral by means of green dots, and add a plot legend, as coded below:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code .code-overflow-wrap}\n# Adding some style\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Computing Spiral\nt = np.linspace(0, 50, 500)\nx = np.sqrt(t) * np.cos(t)\ny = np.sqrt(t) * np.sin(t)\n\n# Generating figure\nplt.figure(1, figsize = (4,4))\n\n# Plotting the Spiral with some options\nplt.plot(x, y, '--', color = 'deeppink', linewidth = 1.5, label = 'Spiral')\n\n# Adding grid\nplt.grid(True, color = 'lightgray')\n\n# Adding title\nplt.title(\"Fermat's spiral for t between 0 and 50\")\n\n# Adding axes labels\nplt.xlabel(\"x-axis\", fontsize = 15)\nplt.ylabel(\"y-axis\", fontsize = 15)\n\n# Showing plot legend\nplt.legend()\n\n# Show the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Adding a bit of style](chap_1_1_files/figure-html/cell-6-output-1.png){width=382 height=383}\n:::\n:::\n\n\nLet us go over the novel part of the above code:\n\n- `plt.figure()`: This command generates a figure object. If you are planning on plotting just one figure at a time, then this command is optional: a figure object is generated implicitly when calling `plt.plot`. Otherwise, if working with `n` figures, you need to generate a figure object with `plt.figure(i)` for each `i` between `1` and `n`. The number `i` uniquely identifies the i-th figure: whenever you call `plt.figure(i)`, Python knows that the next commands will refer to the i-th figure. In our case we only have one figure, so we have used the identifier `1`. The second argument `figsize = (a,b)` in `plt.figure()` specifies the size of `figure 1` in inches. In this case we generated a figure 4 x 4 inches.\n- `plt.plot`: This is plotting the arrays `x` and `y`, as usual. However we are adding a few aestethic touches: the curve is plotted in *dashed* style with `--`, in *deep pink* color and with a line width of 1.5. Finally this plot is labelled *Spiral*. \n- `plt.grid`: This enables a grid in *light gray* color.\n- `plt.title`: This gives a title to the figure, displayed on top.\n- `plt.xlabel` and `plt.ylabel`: These assign labels to the axes, with font size 15 points.\n- `plt.legend()`: This plots the legend, with all the labels assigned in the `plt.plot` call. In this case the only label is *Spiral*.\n\n\n::: {.callout-tip title=\"Matplotlib styles\"}\nThere are countless plot types and options you can specify in **matplotlib**, see for example the [Matplotlib Gallery](https://matplotlib.org/stable/gallery/index.html). Of course there is no need to  remember every single command: a quick Google search can do wonders.\n:::\n\n::: {.callout-note title=\"Generating arrays\"}\nThere are several ways of generating evenly spaced arrays in Python. For example the function `np.arange(a,b,s)` returns an array with values within the half-open interval $[a,b)$, with spacing between values given by `s`. For example\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\n\nt = np.arange(0,1, 0.2)\nprint(\"t =\",t)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nt = [0.  0.2 0.4 0.6 0.8]\n```\n:::\n:::\n\n\n:::\n\n\n\n\n## Implicit curves 2D\n\nA curve $\\g$ in $\\R^2$ can also be defined as the set of points $(x,y) \\in \\R^2$ satisfying\n$$\nf(x,y)=0 \n$$\nfor some given $f \\colon \\R^2 \\to \\R$. For example let us plot the curve $\\g$ implicitly defined by \n$$\nf(x,y) =( 3 x^2 - y^2 )^2 \\ y^2  -  (x^2 + y^2 )^4 \n$$\nfor $-1 \\leq x,y \\leq 1$. First, we need a way to generate a grid in $\\R^2$ so that we can evaluate $f$ on such grid. To illustrate how to do this, let us generate a grid of spacing 1 in the 2D square $[0,4]^2$. The goal is to obtain the 5 x 5 matrix of coordinates\n$$\nA = \\left( \n\\begin{matrix}\n(0,0) &  (1,0)  &  (2,0) & (3,0) & (4,0) \\\\\n(0,1) &  (1,1)  &  (2,1) & (3,1) & (4,1) \\\\\n(0,2) &  (1,2)  &  (2,2) & (2,3) & (2,4) \\\\\n(0,3) &  (1,3)  &  (2,3) & (3,3) & (3,4) \\\\\n(0,4) &  (1,4)  &  (2,4) & (3,4) & (4,4) \\\\\n\\end{matrix}\n\\right)    \n$$\nwhich corresponds to the grid of points\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![The 5 x 5 grid corresponding to the matrix A](chap_1_1_files/figure-html/fig-grid-example-output-1.png){#fig-grid-example width=347 height=337}\n:::\n:::\n\n\nTo achieve this, first generate `x` and `y` coordinates using \n\n```python\nx = np.linspace(0, 4, 5)\ny = np.linspace(0, 4, 5)\n```\nThis generates coordinates\n$$\nx = [0, 1, 2, 3, 4] \\,, \\quad  y = [0, 1, 2, 3, 4] \\,.\n$$\nWe then need to obtain two matrices $X$ and $Y$: one for the $x$ coordinates in $A$, and one for the $y$ coordinates in $A$. This can be achieved with the code \n\n```python\nX[0,0] = 0 \nX[0,1] = 1\nX[0,2] = 2\nX[0,3] = 3\nX[0,4] = 4\nX[1,0] = 0\nX[1,1] = 1\n...\nx[4,3] = 3\nx[4,4] = 4\n```\n\nand similarly for $Y$. The output would be the two matrices $X$ and $Y$\n$$\nX = \\left( \n\\begin{matrix}\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n0 & 1 & 2 & 3 & 4 \\\\\n\\end{matrix}\n\\right)   \\,, \\quad \nY = \n\\left( \n\\begin{matrix}\n0 &  0 &  0 & 0 & 0 \\\\\n1 &  1 &  1 & 1 & 1 \\\\\n2 &  2 &  2 & 2 & 2 \\\\\n3 &  3 &  3 & 3 & 3 \\\\\n4 &  4 &  4 & 4 & 4 \\\\\n\\end{matrix}\n\\right)   \n$$\n\nIf now we plot $X$ against $Y$ via the command\n\n```python\nplt.plot(X, Y, 'k.')\n```\nwe obtain @fig-grid-example. In the above command the style `'k.'` represents black dots. \nThis procedure would be impossible with large vectors. Thankfully there is a function in numpy doing exactly what we need: `np.meshgrid`. \n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Demonstrating np.meshgrid\n\nimport numpy as np\n\n# Generating x and y coordinates\nxlist = np.linspace(0, 4, 5)\nylist = np.linspace(0, 4, 5)\n\n# Generating grid X, Y\nX, Y = np.meshgrid(xlist, ylist)\n\n# Printing the matrices X and Y\n# np.array2string is only needed to align outputs\nprint('X =', np.array2string(X, prefix='X= '))\nprint('\\n')  \nprint('Y =', np.array2string(Y, prefix='Y= '))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nX = [[0. 1. 2. 3. 4.]\n    [0. 1. 2. 3. 4.]\n    [0. 1. 2. 3. 4.]\n    [0. 1. 2. 3. 4.]\n    [0. 1. 2. 3. 4.]]\n\n\nY = [[0. 0. 0. 0. 0.]\n    [1. 1. 1. 1. 1.]\n    [2. 2. 2. 2. 2.]\n    [3. 3. 3. 3. 3.]\n    [4. 4. 4. 4. 4.]]\n```\n:::\n:::\n\n\nNow that we have our grid, we can evaluate the function $f$ on it. This is simply done with the command\n```python\nZ =((3*(X**2) - Y**2)**2)*(Y**2) - (X**2 + Y**2)**4 \n```\nThis will return the matrix $Z$ containing the values $f(x_i,y_i)$ for all $(x_i,y_i)$ in the grid $[X,Y]$. We are now interested in plotting the points in the grid $[X,Y]$ for which $Z$ is zero. This is achieved with the command\n\n```python\nplt.contour(X, Y, Z, [0])\n```\n\nPutting the above observations together, we have the code for plotting the curve $f=0$ for $-1 \\leq x,y \\leq 1$. \n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Plotting f=0\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Generates coordinates and grid\nxlist = np.linspace(-1, 1, 5000)\nylist = np.linspace(-1, 1, 5000)\nX, Y = np.meshgrid(xlist, ylist)\n\n# Computes f\nZ =((3*(X**2) - Y**2)**2)*(Y**2) - (X**2 + Y**2)**4 \n\n# Creates figure object\nplt.figure(figsize = (4,4))\n\n# Plots level set Z = 0\nplt.contour(X, Y, Z, [0])\n\n# Set axes labels\nplt.xlabel(\"x-axis\", fontsize = 15)\nplt.ylabel(\"y-axis\", fontsize = 15)\n\n# Shows plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Plot of the curve defined by f=0](chap_1_1_files/figure-html/cell-10-output-1.png){width=403 height=368}\n:::\n:::\n\n\n## Curves in 3D\n\n\nPlotting in 3D with matplotlib requires the `mplot3d` toolkit, see [here](https://matplotlib.org/3.5.3/tutorials/toolkits/mplot3d.html) for documentation. Therefore our first lines will always be\n\n```python\n# Packages for 3D plots\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n```\n\nWe can now generate empty 3D axes\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Generates and plots empty 3D axes\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\n# Creates figure object\nfig = plt.figure(figsize = (4,4))\n\n# Creates 3D axes object\nax = plt.axes(projection = '3d')\n\n# Shows the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap_1_1_files/figure-html/cell-11-output-1.png){width=337 height=330}\n:::\n:::\n\n\nIn the above code `fig` is a figure object, while `ax` is an axes object. In practice, the figure object contains the axes objects, and the actual plot information will be contained in axes. If you want multiple plots in the figure container, you should use the command \n\n```python\nax = fig.add_subplot(nrows = m, ncols = n, pos = k)\n```\n\nThis generates an axes object `ax` in position `k` with respect to a `m x n` grid of plots in the container figure. For example we can create a 3 x 2 grid of empty 3D axes as follows\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Generates 3 x 2 empty 3D axes\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\n# Creates container figure object\nfig = plt.figure(figsize = (6,8))\n\n# Creates 6 empty 3D axes objects\nax1 = fig.add_subplot(3, 2, 1, projection = '3d')\nax2 = fig.add_subplot(3, 2, 2, projection = '3d')\nax3 = fig.add_subplot(3, 2, 3, projection = '3d')\nax4 = fig.add_subplot(3, 2, 4, projection = '3d')\nax5 = fig.add_subplot(3, 2, 5, projection = '3d')\nax6 = fig.add_subplot(3, 2, 6, projection = '3d')\n\n# Shows the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap_1_1_files/figure-html/cell-12-output-1.png){width=479 height=634}\n:::\n:::\n\n\nWe are now ready to plot a 3D parametric curve $\\gamma \\colon (a,b) \\to \\R^3$ of the form\n$$\n\\gamma(t) = (x(t), y(t), z(t))\n$$\nwith the code\n```python\n# Code to plot 3D curve\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\n# Generates figure and 3D axes\nfig = plt.figure(figsize = (size1,size2))\nax = plt.axes(projection = '3d')\n\n# Plots grid\nax.grid(True)\n\n# Divides time interval (a,b)\n# into n parts and saves them in array t\nt = np.linspace(a, b, n)\n\n# Computes the curve gamma on array t\n# for given functions x(t), y(t), z(t)\nx = x(t) \ny = y(t)\nz = z(t)\n\n# Plots gamma\nax.plot3D(x, y, z)\n\n# Setting title for plot\nax.set_title('3D Plot of gamma')\n\n# Setting axes labels\nax.set_xlabel('x', labelpad = 'p')\nax.set_ylabel('y', labelpad = 'p')\nax.set_zlabel('z', labelpad = 'p')\n\n# Shows the plot\nplt.show()\n```\n\nFor example we can use the above code to plot the Helix\n$$\nx(t) = \\cos(t) \\,, \\quad \ny(t) = \\sin(t) \\,, \\quad\nz(t) = t\n$$ {#eq-helix-curve}\nfor $t \\in [0,6\\pi]$.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Plotting 3D Helix\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\n# Generates figure and 3D axes\nfig = plt.figure(figsize = (4,4))\nax = plt.axes(projection = '3d')\n\n# Plots grid\nax.grid(True)\n\n# Divides time interval (0,6pi) in 100 parts \nt = np.linspace(0, 6*np.pi, 100)\n\n# Computes Helix\nx = np.cos(t) \ny = np.sin(t)\nz = t\n\n# Plots Helix - We added some styling\nax.plot3D(x, y, z, color = \"deeppink\", linewidth = 2)\n\n# Setting title for plot\nax.set_title('3D Plot of Helix')\n\n# Setting axes labels\nax.set_xlabel('x', labelpad = 20)\nax.set_ylabel('y', labelpad = 20)\nax.set_zlabel('z', labelpad = 20)\n\n# Shows the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap_1_1_files/figure-html/cell-13-output-1.png){width=334 height=348}\n:::\n:::\n\n\nWe can also change the viewing angle for a 3D plot store in `ax`. This is done via\n\n```python\nax.view_init(elev = e, azim = a)\n```\n\nwhich displays the 3D axes with an elevation angle `elev` of `e` degrees and an azimuthal angle `azim` of `a` degrees. In other words, the 3D plot will be rotated by `e` degrees above the xy-plane and by `a` degrees around the z-axis. For example, let us plot the helix with 2 viewing angles. Note that we generate 2 sets of axes with the `add_subplot` command discussed above. \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Plotting 3D Helix\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits import mplot3d\n\n# Generates figure object\nfig = plt.figure(figsize = (4,4))\n\n# Generates 2 sets of 3D axes\nax1 = fig.add_subplot(1, 2, 1, projection = '3d')\nax2 = fig.add_subplot(1, 2, 2, projection = '3d')\n\n# We will not show a grid this time\nax1.grid(False)\nax2.grid(False)\n\n# Divides time interval (0,6pi) in 100 parts \nt = np.linspace(0, 6*np.pi, 100)\n\n# Computes Helix\nx = np.cos(t) \ny = np.sin(t)\nz = t\n\n# Plots Helix on both axes\nax1.plot3D(x, y, z, color = \"deeppink\", linewidth = 1.5)\nax2.plot3D(x, y, z, color = \"deeppink\", linewidth = 1.5)\n\n# Setting title for plots\nax1.set_title('Helix from above')\nax2.set_title('Helix from side')\n\n# Changing viewing angle of ax1\n# View from above has elev = 90 and azim = 0\nax1.view_init(elev = 90, azim = 0)\n\n# Changing viewing angle of ax2\n# View from side has elev = 0 and azim = 0\nax2.view_init(elev = 0, azim = 0)\n\n# Shows the plot\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap_1_1_files/figure-html/cell-14-output-1.png){width=322 height=174}\n:::\n:::\n\n\n## Interactive plots  {#sec-plot-2d-interactive}\n\n`Matplotlib` produces beautiful static plots; however it lacks built in interactivity. For this reason I would also like to show you how to plot curves with `Plotly`, a very popular Python graphic library which has built in interactivity. Documentation for `Plotly` and lots of examples can be found [here](https://plotly.com/python/).\n\n\n### 2D Plots   {#sec-plot-2d-curves-interactive}\n\nSay we want to plot the 2D curve $\\gamma \\colon (a,b) \\to \\R^2$ parametrized by\n$$\n\\gamma(t) = ( x(t) , y(t) ) \\,.\n$$\nThe `Plotly` module needed is called `graph_objects`, usually imported as `go`. The function for line plots is called `Scatter`. For documentation and examples see [link](https://plotly.com/python/line-and-scatter/). The code for plotting $\\gamma$ is as follows.\n\n```python\n# Plotting gamma 2D\n\n# Import libraries\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Compute times grid by dividing (a,b) in \n# n equal parts\nt = np.linspace(a, b, n)\n\n# Compute the parametric curve gamma\n# for given functions x(t) and y(t)\nx = x(t)\ny = y(t)\n\n# Create empty figure object and saves \n# it in the variable \"fig\"\nfig = go.Figure()\n\n# Create the line plot object\ndata = go.Scatter(x = x, y = y, mode = 'lines', name = 'gamma')\n\n# Add \"data\" plot to the figure \"fig\"\nfig.add_trace(data)\n\n# Display the figure\nfig.show()\n```\n\nSome comments about the functions called above:\n\n- `go.Figure`: generates an empty Plotly figure\n- `go.Scatter`: generates the actual plot. By default a scatter plot is produced. To obtain linear interpolation of the points, set `mode = 'lines'`. You can also label the plot with `name = \"string\"`\n- `add_trace`: adds a plot to a figure\n- `show`: displays a figure\n\nAs an example, let us plot the Fermat's Spiral defined at @eq-Fermat-Spiral. Compared to the above code, we also add a bit of styling.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Plotting Fermat's Spiral\n\n# Import libraries\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Compute times grid by dividing (0,50) in \n# 500 equal parts\nt = np.linspace(0, 50, 500)\n\n# Computes Fermat's Spiral\nx = np.sqrt(t) * np.cos(t)\ny = np.sqrt(t) * np.sin(t)\n\n# Create empty figure object and saves \n# it in the variable \"fig\"\nfig = go.Figure()\n\n# Create the line plot object\ndata = go.Scatter(x = x, y = y, mode = 'lines', name = 'gamma')\n\n# Add \"data\" plot to the figure \"fig\"\nfig.add_trace(data)\n\n# Here we start with the styling options\n# First we set a figure title\nfig.update_layout(title_text = \"Plotting Fermat's Spiral with Plotly\")\n\n# Adjust figure size\nfig.update_layout(autosize = False, width = 600, height = 600)\n\n# Change background canvas color\nfig.update_layout(paper_bgcolor = \"snow\")\n\n# Axes styling: adding title and ticks positions \nfig.update_layout(\nxaxis=dict(\n        title_text=\"X-axis Title\",\n        titlefont=dict(size=20),\n        tickvals=[-6,-4,-2,0,2,4,6],\n        ), \n\nyaxis=dict(\n        title_text=\"Y-axis Title\",\n        titlefont=dict(size=20),\n        tickvals=[-6,-4,-2,0,2,4,6],\n        )\n)\n\n# Display the figure\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"d36070b1-28b6-4d48-adf8-5518e3d5181d\" class=\"plotly-graph-div\" style=\"height:600px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"d36070b1-28b6-4d48-adf8-5518e3d5181d\")) {                    Plotly.newPlot(                        \"d36070b1-28b6-4d48-adf8-5518e3d5181d\",                        [{\"mode\":\"lines\",\"name\":\"gamma\",\"x\":[0.0,0.3149567257339168,0.43870237457662137,0.5236858860593772,0.5829157146442612,0.6208257211300346,0.639415595914621,0.6397962719537235,0.6227470295344086,0.5889589770065786,0.5391543316370946,0.4741483825994807,0.394881660908706,0.30243499497558785,0.19803383907203095,0.08304535062524687,-0.04102974996511746,-0.1725692567303111,-0.3098446226818997,-0.45103853191187826,-0.5942643923146463,-0.737587319882889,-0.8790462321969876,-1.01667669757703,-1.1485342052558811,-1.2727175355975298,-1.3873919207443686,-1.4908116969532248,-1.5813421614167915,-1.6574803592735887,-1.7178745412067586,-1.7613420487441327,-1.7868854031838721,-1.7937063949645502,-1.7812179931821115,-1.7490539196757469,-1.6970757584609755,-1.6253774990448775,-1.534287441050116,-1.4243674173130971,-1.2964093229022806,-1.151428968008343,-0.9906573030643119,-0.8155290944341989,-0.627669158237355,-0.42887628803315625,-0.22110503886602048,-0.006445555266811636,0.21289834605717375,0.4346326071964864,0.6563976235748518,0.8757939361578009,1.0904086425182336,1.2978422380237677,1.4957355916240656,1.6817967571503332,1.8538273207476952,2.0097479880629114,2.147623121087915,2.2656839440610512,2.362350150464981,2.436249658810703,2.486236283405409,2.511405107481082,2.511105369693724,2.484950700845697,2.43282657546635,2.3548948723173324,2.2515954686580555,2.1236448248870015,1.9720315486270297,1.7980089600995977,1.603084713380918,1.3890075604983139,1.157751376955324,0.9114965978240961,0.6526092426774805,0.38361773502892577,0.10718774730111597,-0.1739046746303507,-0.45680143283488855,-0.7385918525684463,-1.0163430046738686,-1.2871305570700013,-1.5480698292160193,-1.7963467188411733,-2.0292481691496365,-2.2441918471775257,-2.4387547099879043,-2.610700144895717,-2.758003382836957,-2.8788749002161182,-2.9717815439290787,-3.0354651365767724,-3.0689583439370955,-3.0715976142975934,-3.0430330289905942,-2.9832349351120793,-2.8924972646200033,-2.77143747845345,-2.6209931096319576,-2.4424149151149597,-2.237256682147515,-2.0073617705099465,-1.754846507146139,-1.4820805836934519,-1.191664640110048,-0.8864052485397887,-0.5692875404338543,-0.24344574644462522,0.0878680575718658,0.4213166842299576,0.7535117160507999,1.0810481884317535,1.400539717157582,1.7086537063881544,2.0021462697656647,2.277896497831011,2.5329397093403423,2.7644993323035494,2.9700170725622623,3.1471810433803378,3.293951548691475,3.408584235154636,3.489650353790959,3.5360539004648985,3.547045435544452,3.5222324164197003,3.461585911839029,3.3654436038797613,3.2345090214279093,3.069846987909009,2.8728753052869243,2.6453527356222737,2.3893633803465244,2.107297595454242,1.8018296176433732,1.4758921116508337,1.132647882262797,0.775459025369151,0.40785382064501524,0.03349169367149473,-0.3438734027252773,-0.7204308196795943,-1.0923518730590565,-1.4558289399797177,-1.8071145904143175,-2.1425603505371122,-2.458654695907128,-2.7520598782220005,-3.0196471991405818,-3.2585303584934997,-3.466096521954523,-3.640034774768155,-3.778361653216211,-3.8794434739163166,-3.9420152125012513,-3.9651957174190646,-3.948499081179854,-3.891842029989599,-3.7955472329648035,-3.660342473606031,-3.4873556685006504,-3.278105760892465,-3.0344895593586583,-2.7587646339330174,-2.4535284231709227,-2.12169374543639,-1.766460945687944,-1.3912869448469285,-0.9998514920687187,-0.5960209505501741,-0.18380997456796164,0.23265854104253006,0.6491948380471007,1.0615845820065424,1.4656316314222044,1.8572008536179152,2.2322605494485623,2.5869240507187548,2.9174900604768084,3.220481317077182,3.4926811779886986,3.731167738629673,3.933345124857975,4.096971624909831,4.220184357305906,4.301520205226621,4.339932784766041,4.334805253939687,4.28595881095209,4.193656773606993,4.0586041764295455,3.8819428676124494,3.6652421338334684,3.410484926850389,3.1200498110902752,2.796688795746157,2.4435012577170725,2.0639042026308094,1.6615991497460447,1.2405359623358685,0.8048739778286823,0.35894082117833853,-0.09281068966204228,-0.5458471159553316,-0.9956000008488907,-1.4375120427299493,-1.867083371616375,-2.27991745779051,-2.671766183540613,-3.038573615331997,-3.3765180249409346,-3.6820517239551034,-3.951938296431592,-4.183286839216379,-4.373582848233938,-4.520715421674271,-4.623000487118583,-4.679199798900116,-4.688535494004413,-4.650700039155271,-4.565861447965646,-4.43466369469182,-4.258222299733234,-4.038115111077119,-3.776368354896986,-3.4754380769769355,-3.1381871440527958,-2.767858020047553,-2.3680415760591473,-1.9426422343772134,-1.4958397853290721,-1.0320482509819395,-0.5558722012829368,-0.0720609557680191,0.4145388727827604,0.8990320176766661,1.3765238916330547,1.842170116106552,2.2912257446471527,2.71909367946241,3.1213717865757915,3.493898226262054,3.8327945316877274,4.134505989746905,4.3958389037625984,4.613994347776395,4.786598056285484,4.911726131173175,4.987926288844301,5.014234414813378,4.990186239761299,4.915823999908391,4.79169799495905,4.618863008347909,4.398869606540002,4.133750386180238,3.8260012894209057,3.4785581582544243,3.094768747624392,2.6783604639774827,2.2334041402686715,1.764274199781969,1.275605599047027,0.7722479742222566,0.2592174452166241,-0.25835344278389394,-0.7752671401052177,-1.286313359802781,-1.7863216649977653,-2.270213844903842,-2.733055548375399,-3.170106649460081,-3.576869830442558,-3.9491368841306254,-4.283032258511401,-4.575053393193406,-4.822107428000528,-5.021543899397308,-5.171183079756659,-5.269339657446138,-5.314841501882703,-5.307043306629727,-5.2458349547971554,-5.131644503943325,-4.965435741833694,-4.748700319241741,-4.483444520926347,-4.172170790431045,-3.8178541778681776,-3.423913931830136,-2.9941805064773694,-2.5328583021753697,-2.044484502303177,-1.5338844095745037,-1.006123721974625,-0.4664582208378326,0.07971862867238266,0.6269296416615029,1.1696689016302617,1.7024572199685906,2.219897507607561,2.716729498713505,3.1878832710738236,3.6285310182299657,4.0341365443701696,4.400501974359749,4.7238111978598285,5.0006695980118625,5.228139651342129,5.403772026014774,5.525631849935955,5.592319868048619,5.602988258982493,5.557350934530867,5.455688200682561,5.298845715589862,5.088227737331296,4.825784712052417,4.513995310453962,4.1558430770628965,3.754787911692804,3.3147326554157717,2.8399851036842647,2.335215816444331,1.805412138680767,1.2558288843805867,0.6919361719798838,0.11936492960444733,-0.4561493864972463,-1.0288242972627208,-1.5928884527731744,-2.1426398455361446,-2.672503497434967,-3.177088036288459,-3.6512405874854648,-4.0900994215152044,-4.489143819271845,-4.844240643570013,-5.151687137115457,-5.408249503923432,-5.611196872510707,-5.75833028469678,-5.8480064030904355,-5.879155682819024,-5.851294808258959,-5.764533252895572,-5.619573879404467,-5.417707557012561,-5.160801833561529,-4.851283759849733,-4.492117023161706,-4.086773604805558,-3.639200232376492,-3.1537799507814075,-2.6352891862459553,-2.0888507240677505,-1.5198830632957783,-0.9340466493682836,-0.33718751863119145,0.26472108375446274,0.8656385290223667,1.4595174734845668,2.040364760909769,2.602301944817144,3.139624819093412,3.6468613537143453,4.118827446839668,4.550679925023954,4.937966249552705,5.2766704187247155,5.5632545929477795,5.79469601143821,5.968518815701484,6.08282044536577,6.136292325842376,6.128234624162684,6.058564908621195,5.927820608947724,5.737155236024696,5.488328383032041,5.1836895927089035,4.826156237532566,4.419185620402951,3.9667415622668707,3.4732557994214655,2.943584566425212,2.3829607900737257,1.796942365253981,1.1913570242104252,0.5722443464125648,-0.05420451356370871,-0.6817087782598816,-1.3039610593266786,-1.9146907967093105,-2.5077274865649515,-3.0770630599967213,-3.616912781672175,-4.121774050763393,-4.586482506278973,-5.006264864575782,-5.376787948390276,-5.69420340381613,-5.95518764391219,-6.1569766046398495,-6.297394950137555,-6.374879419436003,-6.388496065051367,-6.337951194886548,-6.223595891911098,-6.046424050548252,-5.808063933925045,-5.510763321481782,-5.157368381231599,-4.751296464553523,-4.2965030831488695,-3.797443387064258,-3.259028518878593,-2.686577271695566,-2.085763526934799,-1.462559991578922,-0.8231787930573438,-0.1740095229317098,0.4784446523563686,1.1276321744891855,1.76701891631758,2.39015398326912,2.9907348301318453,3.5626710355968267,4.100146088960779,4.597676561942892,5.050168063491136,5.45296740650162,5.80191045225265,6.093365140702521,6.324269262204166,6.49216257818023,6.595212954368136,6.6322362298274165,6.602709607408849,6.5067784161922395,6.345256162858805,6.119617856407845,5.831986658378025,5.485113978108259,5.082353198891285,4.627627285464321,4.12539058548834,3.5805851968609543,2.9985923282811644,2.3851791318708844,1.7464415333298238,1.0887436265777362,0.4186542356882105,-0.25711872322718843,-0.9317954239858531,-1.59859218297593,-2.250789699068462,-2.881800794031852,-3.4852369702344417,-4.0549731128650945,-4.585209681151236,-5.070531756945706,-5.505964349361521,-5.887023390567881,-6.209761900062338,-6.470810842294427,-6.667414254963706,-6.797458282132999,-6.859493806921309,-6.85275244236808,-6.777155705452973,-6.633317267550583,-6.422538244112179,-6.146795556398396,-5.808723467933785,-5.411588467310145,-4.959257736335893,-4.456161507628989,-3.9072496779216785,-3.317943101952904,-2.694080046272423,-2.0418583320086414,-1.3677737401543113,-0.6785552917363589,0.018901952041096685,0.7176058983019216,1.410537548692226,2.0907215396481282,2.7512963875242464,3.385583730908965,3.987155871121946,4.5499009276183555,5.068084947666473,5.536410339009897,5.950070029984675,6.304796803393123,6.596907297926675,6.823340223614246],\"y\":[0.0,0.03166483406830822,0.08911244662806785,0.16234006020392724,0.24700379111904966,0.33996680424916276,0.438577359779058,0.5404290295731158,0.6432645984498884,0.7449368635111255,0.8433958825444846,0.9366897672633835,1.022972767720246,1.1005172802982048,1.1677277978214091,1.2231555427514431,1.2655129285959317,1.29368723625875,1.3067530463802137,1.3039830742617937,1.2848571313803605,1.2490689982469518,1.1965310440166397,1.1273764726304778,1.0419591156066146,0.940850729192804,0.824835789169538,0.6949038105167743,0.5522392515663481,0.3982090931518116,0.2343482125422876,0.0623426994564791,-0.11598871298412422,-0.2987149060830122,-0.4838141048158895,-0.6691968425829711,-0.8527299097028437,-1.0322610208943945,-1.2056439269937078,-1.370763689247473,-1.5255618307876542,-1.6680610793663924,-1.7963894181253346,-1.9088031670657595,-2.003708826917761,-2.0796834291870114,-2.135493151162467,-2.1701099724421002,-2.182726169890093,-2.1727664706636425,-2.139897707799475,-2.084035849564731,-2.005350302068172,-1.9042654141916318,-1.781459144419422,-1.6378588802845007,-1.474634432576156,-1.293188257821909,-1.0951429935225763,-0.8823264208435274,-0.6567539986130829,-0.4206091402270407,-0.1762214310969544,0.07395699168392358,0.32737665402094557,0.5814172911693357,0.8334154465874053,1.0806928305679417,1.3205851354712166,1.5504709971622421,1.7678007883616023,1.970124929113733,2.1551214024828975,2.3206221698922804,2.4646381901765397,2.585382759336679,2.6812929040471816,2.751048581013197,2.7935894561215617,2.808129061754172,2.794166157387254,2.7514931474109416,2.6802014406723154,2.5806836682533825,2.453632709108222,2.3000375070517483,2.12117569685793,1.9186030915229455,1.694140116711984,1.4498553116722266,1.1880460480992272,0.9112166492396447,0.622054120563473,0.3234017303232248,0.01823070293707414,-0.2903896898886692,-0.5993233362937201,-0.9053994696720005,-1.205445499690016,-1.4963201470214529,-1.7749465342432489,-2.038344883327134,-2.283664471841216,-2.508214505352424,-2.709493572556268,-2.8852173622809105,-3.0333443376051674,-3.1520990817442045,-3.23999305290612,-3.2958425107873053,-3.3187834055019168,-3.308283050249394,-3.2641484316056677,-3.1865310456465954,-3.0759281838246695,-2.933180629253915,-2.759466761432253,-2.5562931050559894,-2.325481396063198,-2.0691522749870326,-1.7897057537151393,-1.4897986364544158,-1.172319108719389,-0.8403587391420877,-0.4971821675054665,-0.14619477831776587,0.20909131781418683,0.5650926530453625,0.918190763165678,1.2647691696557188,1.6012506032816611,1.9241340846822514,2.2300314764783447,2.5157031245258206,2.7780922130256696,3.014357469247668,3.2219038685226433,3.3984110087784383,3.541858846061887,3.6505505079914142,3.7231319306747257,3.7586080960218595,3.7563556802738733,3.7161319606124117,3.6380798645515235,3.5227290860567178,3.370993232586764,3.184163008098354,2.9638954780712328,2.71219950337721,2.4314174699057594,2.1242034798526968,1.7934982080666957,1.4425006624344543,1.074637120591018,0.6935275459104723,0.30294981343254634,-0.09319789918882591,-0.49093617973740317,-0.8862445153914066,-1.2751020863404383,-1.6535288037932097,-2.0176261723213496,-2.3636175560070956,-2.6878874317214665,-2.9870192210337305,-3.2578313046808516,-3.4974108400992643,-3.7031450230889678,-3.8727494590496607,-4.004293337167059,-4.096221132163083,-4.1473705924507245,-4.156986810414162,-4.124732209699432,-4.050692325458273,-3.935377296023451,-3.7797190280766446,-3.585064041556437,-3.3531620448913353,-3.086150335176109,-2.7865341611842824,-2.4571632291761283,-2.101204571883119,-1.722112039401325,-1.3235927066058832,-0.9095705247251208,-0.48414757453377066,-0.05156330492009967,0.3838478369352832,0.8176999591089358,1.245600023396915,1.6631924401513092,2.0662035057811345,2.4504852286604186,2.8120580932902017,3.1471523212945645,3.4522472011233125,3.7241080760703653,3.9598206022346423,4.156821914141122,4.3129283656552495,4.426359547273367,4.495758317527453,4.520206625743066,4.499236945342166,4.432839180868166,4.321462957487689,4.166015248431899,3.9678533432067677,3.7287732069442767,3.4509933284992766,3.1371342013354875,2.7901936264103138,2.413518069694207,2.010770348195867,1.5858939569782744,1.1430743852367258,0.6866978016936117,0.2213075180020085,-0.24844133676482721,-0.7178284773923868,-1.182115990898091,-1.6365962525130653,-2.0766397438202255,-2.4977422865562717,-2.8955712095016684,-3.266009974734124,-3.605200803237913,-3.9095848583226296,-4.175939568339567,-4.401412697576115,-4.583552805695449,-4.72033577136401,-4.810187094429489,-4.851999732793743,-4.84514727455527,-4.789492292631046,-4.685389777440608,-4.533685592860089,-4.335709951028881,-4.093265952206618,-3.8086132862180473,-3.4844472415739705,-3.1238732166104057,-2.730376973448859,-2.307790919767565,-1.8602567448294518,-1.392184774504313,-0.9082104447482352,-0.41314832379754485,0.0880558601317728,0.5903747068608162,1.08874965200007,1.578141986233379,2.053583870827808,2.5102288321722845,2.943401221506637,3.34864413459585,3.7217652998619912,4.0588804622881165,4.356453814080984,4.611335051397893,4.82079266913703,4.9825431425430855,5.094775684829949,5.156172313773253,5.165923006842994,5.123735773466733,5.029841523947265,4.884993666893795,4.690462420235491,4.448023874433513,4.159943899848488,3.8289570428132387,3.458240606267866,3.0513841603104,2.6123547751929843,2.1454583136635,1.6552971606551392,1.1467248057347181,0.6247977270412567,0.09472505432735114,-0.43818348714929417,-0.9685708310101201,-1.4910864876341632,-2.0004405822165734,-2.491457466643473,-2.959128361297841,-3.398662490912758,-3.805536192049608,-4.175539488579415,-4.504819655513311,-4.789921320436385,-5.027822685369232,-5.21596748978914,-5.3522923774168465,-5.435249374802315,-5.46382323827559,-5.437543476983475,-5.356490912998922,-5.221298694334522,-5.033147732562785,-4.7937565930808,-4.505365922285895,-4.170717551481038,-3.7930284716394755,-3.375959925672718,-2.923581915026135,-2.440333464757486,-1.9309790352464182,-1.4005615088809085,-0.854352216052344,-0.29779849618575077,0.26353068399663043,0.8240005115131339,1.3779669481666499,1.9198336220837404,2.4441084157545587,2.945459177892745,3.4187679935486535,3.859183459767496,4.2621704325756165,4.623556735029661,4.939576345251778,5.206908617514742,5.422713128206838,5.584659781515761,5.690953856501709,5.74035572741864,5.732195042191712,5.666379199338192,5.543396020775906,5.364310576323365,5.130756174671853,4.844919594607306,4.509520688680502,4.127786548776629,3.7034204785353873,3.240566070754902,2.743766738231265,2.2179210934247955,1.6682346154166574,1.100168081382933,0.5193832738592667,-0.06831349595708698,-0.6570294850282299,-1.2408446536200683,-1.8138712448442815,-2.370313208512435,-2.9045248691083856,-3.4110682436417137,-3.8847684271247287,-4.320766481312144,-4.714569285994047,-5.062095841311024,-5.359719543989766,-5.60430599974109,-5.793245977936772,-5.924483162654734,-5.996536405780965,-6.008516242567263,-5.960135487323451,-5.851713786197611,-5.6841760646747375,-5.459044868892916,-5.178426661517901,-4.844992194108588,-4.461951138028094,-4.033021214396915,-3.56239211975206,-3.0546845973930465,-2.5149050543195126,-1.9483961696790788,-1.3607839822752745,-0.757921981500324,-0.14583275767387152,0.4693522061501977,1.0814539985731522,1.6843083838603456,2.271827920940234,2.838063470998443,3.3772644718253613,3.8839373679218285,4.352901602407228,4.779342599856368,5.1588611980943995,5.487519021427055,5.761879327441113,5.979042903992166,6.136678641862367,6.233048461341025,6.26702632712978,6.238111144943915,6.14643339438339,5.992755415468742,5.778465330047546,5.505564643434867,5.176649635508909,4.794886713395137,4.363981959201737,3.8881451653914505,3.3720487066899802,2.820781650361278,2.239799555684233,1.6348704580384492,1.0120175726897853,0.3774592877434658,-0.26245295555071874,-0.9012982742088748,-1.5326508091684188,-2.1501443975720784,-2.7475368004268237,-3.3187728373109846,-3.858045789274188,-4.359856447015948,-4.819069203690603,-5.230964620059141,-5.591287923922908,-5.896292945493851,-6.142781035197483,-6.328134559924245,-6.45034462745497,-6.5080327461535745,-6.500466187475431,-6.4275668817786835,-6.289913742720071,-6.0887383815161025,-5.825914238891817,-5.503939228952951,-5.125912054831707,-4.695502420109266,-4.216915422057546,-3.694850472038778,-3.1344551443492112,-2.5412744068220454,-1.921195734077757,-1.2803906469421045,-0.6252532587975329,0.037663558892166285,0.7017137542732694,1.3602247593989105,2.0065645721010252,2.634208580702082,3.2368054579187406,3.8082414581896997,4.342702467270184,4.834733174141335,5.279292762888075,5.6718065559343644,6.008213079568233,6.285006067651065,6.499270969346118,6.648715581126374,6.731694481693905,6.747227010179477,6.695008592479184,6.575415287178515,6.38950149054694,6.138990808875125,5.826260175279553,5.454317356322443,5.026772060698363,4.54780092714571,4.0221067309935785,3.454872207716537,2.851708946944145,2.2186018609911944,1.5618497776217377,0.8880027469627513,0.20379668682714472,-0.4839139811716817,-1.1682250307209405,-1.8422517762709805,-2.4991983680525167,-3.132426338894891,-3.73552171117214,-4.302359985268617,-4.827168350882216,-5.304584489089949,-5.729711366129229,-6.098167458980958,-6.406131897693766,-6.650384059524776,-6.828337204892582,-6.938065804302676,-6.9783262682242215,-6.948570857744998,-6.848954622050849,-6.680335278684396,-6.444266023433671,-6.142981327872625,-5.779375853305146,-5.356976679438507,-4.8799091138287105,-4.352856413310449,-3.7810138105901387,-3.1700372973075033,-2.525987668568508,-1.8552703826687638],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Plotting Fermat's Spiral with Plotly\"},\"autosize\":false,\"width\":600,\"height\":600,\"paper_bgcolor\":\"snow\",\"xaxis\":{\"title\":{\"font\":{\"size\":20},\"text\":\"X-axis Title\"},\"tickvals\":[-6,-4,-2,0,2,4,6]},\"yaxis\":{\"title\":{\"font\":{\"size\":20},\"text\":\"Y-axis Title\"},\"tickvals\":[-6,-4,-2,0,2,4,6]}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('d36070b1-28b6-4d48-adf8-5518e3d5181d');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n::: {.content-visible when-format=\"html\"}\nAs you can examine by moving the mouse pointer, the above plot is interactive. Note that the style customizations could be listed in a single call of the function `update_layout`. There are also pretty buit-in themes available, see [here](https://plotly.com/python/templates/). The layout can be specified with the command\n```python\nfig.update_layout(template = template_name)\n```\nwhere `template_name` can be `\"plotly\"`, `\"plotly_white\"`, `\"plotly_dark\"`, `\"ggplot2\"`, `\"seaborn\"`, `\"simple_white`\".\n:::\n\n\n\n::: {.content-visible when-format=\"pdf\"}\nThe above code generates an image that cannot be rendered in pdf. To see the output, please click [here](https://www.silviofanzon.com/2023-Differential-Geometry-Notes/sections/appendix_1.html#sec-plot-2d-curves-interactive) for the digital version of these notes. Note that the style customizations could be listed in a single call of the function `update_layout`. There are also pretty buit-in themes available, see [here](https://plotly.com/python/templates/). The layout can be specified with the command\n```python\nfig.update_layout(template = template_name)\n```\nwhere `template_name` can be `\"plotly\"`, `\"plotly_white\"`, `\"plotly_dark\"`, `\"ggplot2\"`, `\"seaborn\"`, `\"simple_white`\".\n:::\n\n\n\n\n\n### 3D Plots   {#sec-plot-3d-curves-interactive}\n\nWe now want to plot a 3D curve $\\gamma \\colon (a,b) \\to \\R^3$ parametrized by\n$$\n\\gamma(t) = ( x(t) , y(t) , z(t)) \\,.\n$$\nAgain we use the `Plotly` module `graph_objects`, imported as `go`. The function for 3D line plots is called `Scatter3d`, and documentation and examples can be found at [link](https://plotly.com/python/3d-scatter-plots/). The code for plotting $\\gamma$ is as follows.\n\n\n```python\n# Plotting gamma 3D\n\n# Import libraries\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Compute times grid by dividing (a,b) in \n# n equal parts\nt = np.linspace(a, b, n)\n\n# Compute the parametric curve gamma\n# for given functions x(t), y(t), z(t)\nx = x(t)\ny = y(t)\nz = z(t)\n\n# Create empty figure object and saves \n# it in the variable \"fig\"\nfig = go.Figure()\n\n# Create the line plot object\ndata = go.Scatter3d(x = x, y = y, z = z, mode = 'lines', name = 'gamma')\n\n# Add \"data\" plot to the figure \"fig\"\nfig.add_trace(data)\n\n# Display the figure\nfig.show()\n```\n\nThe functions `go.Figure`, `add_trace` and `show` appearing above are described in the previous Section. The new addition is `go.Scatter3d`, which generates a 3D scatter plot of the points stored in the array `[x,y,z]`. Setting  `mode = 'lines'` results in a linear interpolation of such points. As before, the curve can be labeled by setting `name = \"string\"`. \n\nAs an example, we plot the 3D Helix defined at @eq-helix-curve. We also add some styling. We can also use the same pre-defined templates descirbed for `go.Scatter` in the previous section, see [here](https://plotly.com/python/templates/) for official documentation.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Plotting 3D Helix\n\n# Import libraries\nimport numpy as np\nimport plotly.graph_objects as go\n\n# Divides time interval (0,6pi) in 100 parts \nt = np.linspace(0, 6*np.pi, 100)\n\n# Computes Helix\nx = np.cos(t) \ny = np.sin(t)\nz = t\n\n# Create empty figure object and saves \n# it in the variable \"fig\"\nfig = go.Figure()\n\n# Create the line plot object\n# We add options for the line width and color\ndata = go.Scatter3d(\n    x = x, y = y, z = z, \n    mode = 'lines', name = 'gamma', \n    line = dict(width = 10, color = \"darkblue\")\n    )\n\n# Add \"data\" plot to the figure \"fig\"\nfig.add_trace(data)\n\n# Here we start with the styling options\n# First we set a figure title\nfig.update_layout(title_text = \"Plotting 3D Helix with Plotly\")\n\n# Adjust figure size\nfig.update_layout(\n    autosize = False, \n    width = 600, \n    height = 600\n    )\n\n# Set pre-defined template\nfig.update_layout(template = \"seaborn\")\n\n# Options for curve line style\n\n\n# Display the figure\nfig.show()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"c83ef0cf-2b42-4c31-a23b-fcde367c2078\" class=\"plotly-graph-div\" style=\"height:600px; width:600px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"c83ef0cf-2b42-4c31-a23b-fcde367c2078\")) {                    Plotly.newPlot(                        \"c83ef0cf-2b42-4c31-a23b-fcde367c2078\",                        [{\"line\":{\"color\":\"darkblue\",\"width\":10},\"mode\":\"lines\",\"name\":\"gamma\",\"x\":[1.0,0.9819286972627067,0.9283679330160727,0.8412535328311812,0.7237340381050702,0.5800569095711983,0.41541501300188644,0.23575893550942728,0.0475819158237424,-0.142314838273285,-0.32706796331742144,-0.49999999999999983,-0.6548607339452851,-0.7860530947427873,-0.8888354486549234,-0.9594929736144973,-0.9954719225730846,-0.9954719225730846,-0.9594929736144975,-0.8888354486549235,-0.7860530947427877,-0.6548607339452852,-0.5000000000000004,-0.3270679633174219,-0.14231483827328523,0.04758191582374238,0.23575893550942661,0.41541501300188605,0.5800569095711979,0.7237340381050701,0.8412535328311808,0.9283679330160723,0.9819286972627066,1.0,0.9819286972627067,0.9283679330160729,0.8412535328311814,0.7237340381050704,0.5800569095711984,0.41541501300188727,0.23575893550942797,0.04758191582374287,-0.14231483827328475,-0.32706796331742144,-0.4999999999999992,-0.6548607339452852,-0.7860530947427872,-0.8888354486549229,-0.9594929736144974,-0.9954719225730845,-0.9954719225730846,-0.9594929736144976,-0.888835448654924,-0.7860530947427876,-0.6548607339452858,-0.5000000000000013,-0.3270679633174221,-0.14231483827328636,0.04758191582374214,0.2357589355094264,0.415415013001885,0.5800569095711978,0.7237340381050693,0.8412535328311811,0.9283679330160723,0.9819286972627064,1.0,0.9819286972627069,0.9283679330160727,0.8412535328311816,0.7237340381050712,0.5800569095711986,0.4154150130018875,0.23575893550942734,0.04758191582374312,-0.14231483827328364,-0.3270679633174212,-0.499999999999999,-0.6548607339452837,-0.786053094742787,-0.8888354486549228,-0.9594929736144973,-0.9954719225730845,-0.9954719225730848,-0.9594929736144976,-0.8888354486549241,-0.7860530947427877,-0.6548607339452872,-0.5000000000000016,-0.3270679633174224,-0.14231483827328484,0.04758191582374012,0.23575893550942614,0.4154150130018864,0.5800569095711962,0.7237340381050691,0.841253532831181,0.9283679330160716,0.9819286972627064,1.0],\"y\":[0.0,0.1892512443604102,0.3716624556603275,0.5406408174555976,0.6900790114821119,0.8145759520503356,0.9096319953545183,0.9718115683235417,0.998867339183008,0.9898214418809328,0.9450008187146686,0.8660254037844387,0.7557495743542583,0.6181589862206055,0.4582265217274105,0.28173255684143006,0.09505604330418288,-0.09505604330418263,-0.2817325568414294,-0.4582265217274103,-0.618158986220605,-0.7557495743542582,-0.8660254037844384,-0.9450008187146683,-0.9898214418809327,-0.998867339183008,-0.9718115683235419,-0.9096319953545186,-0.8145759520503358,-0.690079011482112,-0.5406408174555982,-0.3716624556603281,-0.18925124436041063,-2.4492935982947064e-16,0.18925124436041013,0.3716624556603268,0.5406408174555971,0.6900790114821117,0.8145759520503356,0.909631995354518,0.9718115683235415,0.998867339183008,0.9898214418809328,0.9450008187146686,0.8660254037844392,0.7557495743542582,0.6181589862206056,0.4582265217274115,0.2817325568414299,0.09505604330418356,-0.09505604330418282,-0.28173255684142917,-0.4582265217274093,-0.6181589862206051,-0.7557495743542577,-0.8660254037844378,-0.9450008187146683,-0.9898214418809326,-0.998867339183008,-0.9718115683235419,-0.909631995354519,-0.814575952050336,-0.6900790114821129,-0.5406408174555977,-0.3716624556603283,-0.18925124436041174,-4.898587196589413e-16,0.18925124436040902,0.3716624556603274,0.5406408174555969,0.6900790114821109,0.8145759520503354,0.9096319953545179,0.9718115683235417,0.998867339183008,0.9898214418809329,0.9450008187146687,0.8660254037844393,0.7557495743542595,0.6181589862206058,0.45822652172741174,0.2817325568414301,0.09505604330418381,-0.09505604330418081,-0.28173255684142895,-0.4582265217274091,-0.618158986220605,-0.7557495743542564,-0.8660254037844377,-0.9450008187146682,-0.9898214418809328,-0.9988673391830081,-0.971811568323542,-0.9096319953545184,-0.8145759520503372,-0.690079011482113,-0.5406408174555979,-0.3716624556603302,-0.18925124436041196,-7.347880794884119e-16],\"z\":[0.0,0.19039955476301776,0.3807991095260355,0.5711986642890533,0.761598219052071,0.9519977738150888,1.1423973285781066,1.3327968833411243,1.523196438104142,1.7135959928671598,1.9039955476301775,2.0943951023931953,2.284794657156213,2.4751942119192307,2.6655937666822487,2.855993321445266,3.046392876208284,3.236792430971302,3.4271919857343196,3.6175915404973376,3.807991095260355,3.998390650023373,4.1887902047863905,4.3791897595494085,4.569589314312426,4.759988869075444,4.9503884238384614,5.140787978601479,5.331187533364497,5.521587088127515,5.711986642890532,5.90238619765355,6.092785752416568,6.283185307179586,6.473584861942604,6.663984416705621,6.854383971468639,7.044783526231657,7.235183080994675,7.425582635757692,7.61598219052071,7.806381745283728,7.996781300046746,8.187180854809764,8.377580409572781,8.5679799643358,8.758379519098817,8.948779073861834,9.139178628624853,9.32957818338787,9.519977738150889,9.710377292913906,9.900776847676923,10.091176402439942,10.281575957202959,10.471975511965976,10.662375066728995,10.852774621492012,11.04317417625503,11.233573731018048,11.423973285781065,11.614372840544084,11.8047723953071,11.99517195007012,12.185571504833137,12.375971059596154,12.566370614359172,12.75677016912219,12.947169723885208,13.137569278648225,13.327968833411242,13.518368388174261,13.708767942937278,13.899167497700297,14.089567052463314,14.279966607226331,14.47036616198935,14.660765716752367,14.851165271515384,15.041564826278403,15.23196438104142,15.422363935804439,15.612763490567456,15.803163045330473,15.993562600093492,16.18396215485651,16.374361709619528,16.564761264382543,16.755160819145562,16.94556037390858,17.1359599286716,17.326359483434615,17.516759038197634,17.707158592960653,17.897558147723668,18.087957702486687,18.278357257249706,18.46875681201272,18.65915636677574,18.84955592153876],\"type\":\"scatter3d\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"rgb(234,234,242)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"rgb(36,36,36)\"},\"error_y\":{\"color\":\"rgb(36,36,36)\"},\"marker\":{\"line\":{\"color\":\"rgb(234,234,242)\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"baxis\":{\"endlinecolor\":\"rgb(36,36,36)\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"rgb(36,36,36)\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"colorscale\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"colorscale\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"colorscale\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"colorscale\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"colorscale\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2},\"colorscale\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"rgb(231,231,240)\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"rgb(183,183,191)\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"rgb(67,103,167)\"},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"tickcolor\":\"rgb(36,36,36)\",\"ticklen\":8,\"ticks\":\"outside\",\"tickwidth\":2}},\"colorscale\":{\"sequential\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]],\"sequentialminus\":[[0.0,\"rgb(2,4,25)\"],[0.06274509803921569,\"rgb(24,15,41)\"],[0.12549019607843137,\"rgb(47,23,57)\"],[0.18823529411764706,\"rgb(71,28,72)\"],[0.25098039215686274,\"rgb(97,30,82)\"],[0.3137254901960784,\"rgb(123,30,89)\"],[0.3764705882352941,\"rgb(150,27,91)\"],[0.4392156862745098,\"rgb(177,22,88)\"],[0.5019607843137255,\"rgb(203,26,79)\"],[0.5647058823529412,\"rgb(223,47,67)\"],[0.6274509803921569,\"rgb(236,76,61)\"],[0.6901960784313725,\"rgb(242,107,73)\"],[0.7529411764705882,\"rgb(244,135,95)\"],[0.8156862745098039,\"rgb(245,162,122)\"],[0.8784313725490196,\"rgb(246,188,153)\"],[0.9411764705882353,\"rgb(247,212,187)\"],[1.0,\"rgb(250,234,220)\"]]},\"colorway\":[\"rgb(76,114,176)\",\"rgb(221,132,82)\",\"rgb(85,168,104)\",\"rgb(196,78,82)\",\"rgb(129,114,179)\",\"rgb(147,120,96)\",\"rgb(218,139,195)\",\"rgb(140,140,140)\",\"rgb(204,185,116)\",\"rgb(100,181,205)\"],\"font\":{\"color\":\"rgb(36,36,36)\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"rgb(234,234,242)\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"rgb(234,234,242)\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\"},\"bgcolor\":\"rgb(234,234,242)\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"rgb(234,234,242)\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"showgrid\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"rgb(234,234,242)\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"showgrid\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"rgb(234,234,242)\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"showgrid\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"fillcolor\":\"rgb(67,103,167)\",\"line\":{\"width\":0},\"opacity\":0.5},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\"},\"bgcolor\":\"rgb(234,234,242)\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\"}},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\"},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showgrid\":true,\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\"}}},\"title\":{\"text\":\"Plotting 3D Helix with Plotly\"},\"autosize\":false,\"width\":600,\"height\":600},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('c83ef0cf-2b42-4c31-a23b-fcde367c2078');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n::: {.content-visible when-format=\"html\"}\nThe above plot is interactive: you can pan arond by dragging the pointer. Once again, the style customizations could be listed in a single call of the function `update_layout`.\n:::\n\n\n\n::: {.content-visible when-format=\"pdf\"}\nThe above code generates an image that cannot be rendered in pdf. To see the output, please click [here](https://www.silviofanzon.com/2023-Differential-Geometry-Notes/sections/appendix_1.html#sec-plot-3d-curves-interactive) for the digital version of these notes. Once again, the style customizations could be listed in a single call of the function `update_layout`.\n:::\n\n",
    "supporting": [
      "chap_1_1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n<script type=\"text/javascript\">\nwindow.PlotlyConfig = {MathJaxConfig: 'local'};\nif (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\nif (typeof require !== 'undefined') {\nrequire.undef(\"plotly\");\nrequirejs.config({\n    paths: {\n        'plotly': ['https://cdn.plot.ly/plotly-2.24.1.min']\n    }\n});\nrequire(['plotly'], function(Plotly) {\n    window._Plotly = Plotly;\n});\n}\n</script>\n\n"
      ]
    }
  }
}